/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.baremaps.tilestore.pmtiles;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.baremaps.tilestore.TileCoord;
import org.apache.baremaps.tilestore.TileStore;
import org.apache.baremaps.tilestore.TileStoreException;

public class PMTilesStore implements TileStore {

  private final PMTilesWriter writer;

  public PMTilesStore(Path path) {
    try {
      this.writer = new PMTilesWriter(path);

      var metadata = new HashMap<String, Object>();
      metadata.put("name", "baremaps");
      metadata.put("type", "baselayer");
      metadata.put("version", "0.0.1");
      metadata.put("description", "PMTiles generated by Baremaps");
      metadata.put("attribution", "OpenStreetMap contributors");
      metadata.put("vector_layers", List.of(
          "aerialway", "aeroway", "amenity", "attraction",
          "barrier", "boundary", "building", "highway", "landuse",
          "leisure", "man_made", "natural", "ocean", "point",
          "power", "railway", "route", "waterway")
          .stream().map(s -> Map.of("id", s)).toList());
      this.writer.writeMetadata(metadata);

    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public ByteBuffer read(TileCoord tileCoord) throws TileStoreException {
    throw new UnsupportedOperationException();
  }

  @Override
  public void write(TileCoord tileCoord, ByteBuffer blob) throws TileStoreException {
    try {
      writer.writeTile(tileCoord.z(), tileCoord.x(), tileCoord.y(), blob.array());
    } catch (IOException e) {
      throw new TileStoreException(e);
    }
  }

  @Override
  public void delete(TileCoord tileCoord) throws TileStoreException {
    throw new UnsupportedOperationException();
  }

  @Override
  public void close() throws TileStoreException {
    try {
      writer.finalize();
    } catch (IOException e) {
      throw new TileStoreException(e);
    }
  }
}
