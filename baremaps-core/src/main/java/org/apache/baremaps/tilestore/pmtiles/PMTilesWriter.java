/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.baremaps.tilestore.pmtiles;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.io.LittleEndianDataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

public class PMTilesWriter {

  private final Path path;

  private List<Entry> entries;

  private Path tilePath;

  private boolean clustered = true;

  public PMTilesWriter(Path path) throws IOException {
    this.path = path;
    this.entries = new ArrayList<>();
    this.tilePath = Files.createTempFile(path.getParent(), "tiles", ".tmp");
  }

  public void writeTile(int z, int x, int y, byte[] bytes) throws IOException {
    var tileId = PMTiles.zxyToTileId(z, x, y);
    var offset = Files.size(tilePath);
    var length = bytes.length;

    if (entries.size() > 0 && tileId < entries.get(entries.size() - 1).getTileId()) {
      clustered = false;
    }

    try (var output = new FileOutputStream(tilePath.toFile(), true)) {
      output.write(bytes);
      entries.add(new Entry(tileId, offset, length, 1));
    }
  }

  public void finalize() throws IOException {
    // Sort the entries by tile id
    if (!clustered) {
      entries.sort(Comparator.comparingLong(Entry::getTileId));
    }

    var metadataMap = new HashMap<String, Object>();
    metadataMap.put("name", "baremaps");
    metadataMap.put("type", "baselayer");
    metadataMap.put("version", "0.0.1");
    metadataMap.put("description", "PMTiles generated by Baremaps");
    metadataMap.put("attribution", "OpenStreetMap contributors");
    metadataMap.put("vector_layers", List.of("aerialway", "aeroway", "amenity", "attraction",
        "barrier", "boundary", "building", "highway", "landuse",
        "leisure", "man_made", "natural", "ocean", "point",
        "power", "railway", "route", "waterway")
        .stream().map(s -> Map.of("id", s)).toList());

    var metadata = new ObjectMapper().writeValueAsBytes(metadataMap);

    var directories = PMTiles.optimizeDirectories(entries, 16247);
    long rootOffset = 127;
    long rootLength = directories.root().length;
    long metadataOffset = rootOffset + rootLength;
    long metadataLength = metadata.length;
    long leavesOffset = metadataOffset + metadataLength;
    long leavesLength = directories.leaves().length;
    long tilesOffset = leavesOffset + leavesLength;
    long tilesLength = Files.size(tilePath);
    int minZoom = (int) PMTiles.tileIdToZxy(entries.get(0).getTileId())[0];
    int maxZoom = (int) PMTiles.tileIdToZxy(entries.get(entries.size() - 1).getTileId())[0];
    var numTiles = entries.size();

    var header = new Header();
    header.setNumAddressedTiles(numTiles);
    header.setNumTileEntries(numTiles);
    header.setNumTileContents(numTiles);
    header.setClustered(true);
    header.setInternalCompression(Compression.None);
    header.setTileCompression(Compression.Gzip);
    header.setTileType(TileType.Mvt);
    header.setMinZoom(minZoom);
    header.setMaxZoom(maxZoom);
    header.setRootOffset(rootOffset);
    header.setRootLength(rootLength);
    header.setMetadataOffset(metadataOffset);
    header.setMetadataLength(metadataLength);
    header.setLeavesOffset(leavesOffset);
    header.setLeavesLength(leavesLength);
    header.setTilesOffset(tilesOffset);
    header.setTilesLength(tilesLength);
    header.setCenterZoom(14);
    header.setCenterLat(46.5197);
    header.setCenterLon(6.6323);
    header.setMinLon(-180);
    header.setMinLat(-90);
    header.setMaxLon(180);
    header.setMaxLat(90);

    try (var output = new LittleEndianDataOutputStream(new FileOutputStream(path.toFile()))) {
      PMTiles.serializeHeader(output, header);
      output.write(directories.root());
      output.write(metadata);
      output.write(directories.leaves());
      Files.copy(tilePath, output);
    } finally {
      Files.delete(tilePath);
    }
  }

}
